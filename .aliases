#!/usr/bin/env bash

#source ~/workspaces/dotfiles-1/.aliases

# Remove the alias' I don't use/want
#unalias emptytrash;

# This is specific to WSL 2. If the WSL 2 VM goes rogue and decides not to free
# up memory, this command will free your memory after about 20-30 seconds.
#   Details: https://github.com/microsoft/WSL/issues/4166#issuecomment-628493643
#alias drop_cache="sudo sh -c \"echo 3 >'/proc/sys/vm/drop_caches' && swapoff -a && swapon -a && printf '\n%s\n' 'Ram-cache and Swap Cleared'\""

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

alias path='echo $PATH | tr -s ":" "\n"'

#----------------------grep-----------------------------
GREP_OPTIONS="  --exclude-dir=\.svn"
GREP_OPTIONS+=" --exclude-dir=\.git"
GREP_OPTIONS+=" --exclude-dir=node_modules"
GREP_OPTIONS+=" --exclude-dir=echarts"
GREP_OPTIONS+=" --exclude-dir=jquery"
GREP_OPTIONS+=" --exclude-dir=css"
GREP_OPTIONS+=" --exclude-dir=bootstrap"
GREP_OPTIONS+=" --exclude-dir=logs"
GREP_OPTIONS+=" --exclude-dir=useless"
GREP_OPTIONS+=" --exclude-dir=js"
GREP_OPTIONS+=" --exclude-dir=tlogs"
GREP_OPTIONS+=" --exclude-dir=data"
GREP_OPTIONS+=" --exclude-dir=data_temp"
GREP_OPTIONS+=" --exclude-dir=vendor"

# GREP_OPTIONS+=" --exclude=\*.tmp"
# GREP_OPTIONS+=" --exclude=tags"
# GREP_OPTIONS+=" --exclude=*.csv"
# GREP_OPTIONS+=" --exclude=*.json"
GREP_OPTIONS+=" --devices=skip"
GREP_OPTIONS+=" --exclude-dir=CVS"
GREP_OPTIONS+=" --exclude-dir=\.libs"
GREP_OPTIONS+=" --exclude-dir=\.deps"

# GREP_OPTIONS+=" --directories=recurse"
GREP_OPTIONS+=" --binary-files=without-match"
GREP_OPTIONS+=" --color=auto"

alias grep="grep $GREP_OPTIONS 2>/dev/null"
alias egrep="grep -E $GREP_OPTIONS"
alias fgrep="grep -F $GREP_OPTIONS"
unset GREP_OPTIONS

# Detect which `ls` flavor is in use
if ls --color > /dev/null 2>&1; then # GNU `ls`
  # Use auto and not 'always' here
  # This keeps color codes from being redirected if "ls > filename" is used
  colorflag="--color=auto"

  # colors definitions
  dark_black="30"
  dark_red="31"
  dark_green="32"
  dark_yellow="33"
  dark_blue="34"
  dark_purple="35"
  dark_cyan="36"
  dark_white="37"
  black="90"
  red="91"
  green="92"
  yellow="93"
  blue="94"
  purple="95"
  cyan="96"
  white="97"

  # format definitions (should precede color)
  bold="1;"
  italic="3;"
  underline="4;"

  # File system
  LS_COLORS="di=$dark_cyan"
  LS_COLORS+=":ln=$italic$yellow"
  LS_COLORS+=":ex=$red"

  # Code files
  LS_COLORS+=":*.o=$dark_cyan"
  LS_COLORS+=":*.h=$dark_green"
  LS_COLORS+=":*.hh=$dark_green"
  LS_COLORS+=":*.hpp=$dark_green"
  LS_COLORS+=":*.c=$yellow"
  LS_COLORS+=":*.C=$yellow"
  LS_COLORS+=":*.cc=$yellow"
  LS_COLORS+=":*.cpp=$yellow"
  LS_COLORS+=":*.hxx=$yellow"

  # Build
  LS_COLORS+=":*Makefile=$dark_blue"
  LS_COLORS+=":*SConscript=$dark_blue"
  LS_COLORS+=":*CMakeList.txt=$dark_blue"
  LS_COLORS+=":*configure=$dark_blue"
  LS_COLORS+=":*.diff=$dark_cyan"

  # Project related
  LS_COLORS+=":*README=$green"
  LS_COLORS+=":*NOTES=$green"
  LS_COLORS+=":*INSTALL=$dark_cyan"
  LS_COLORS+=":*TODO=$green"
  LS_COLORS+=":*INFO=$dark_cyan"
  LS_COLORS+=":*MANIFEST=$dark_cyan"
  LS_COLORS+=":*ChangeLog=$dark_cyan"
  LS_COLORS+=":*AUTHORS=$dark_cyan"
  LS_COLORS+=":*CONTRIBUTORS=$dark_cyan"
  LS_COLORS+=":*LICENSE=$dark_cyan"
  LS_COLORS+=":*PKG-INFO=$dark_cyan"
  LS_COLORS+=":*NEWS=$dark_cyan"
  LS_COLORS+=":*COPYING=$dark_cyan"
  LS_COLORS+=":*COPYRIGHT=$dark_cyan"

  # archives
  LS_COLORS+=":*.gz=$cyan"
  LS_COLORS+=":*.bz2=$cyan"
  LS_COLORS+=":*.tbz=$cyan"
  LS_COLORS+=":*.tgz=$cyan"
  LS_COLORS+=":*.7z=$cyan"
  LS_COLORS+=":*.xz=$cyan"
  LS_COLORS+=":*.zip=$cyan"

  # misc files
  LS_COLORS+=":*.log=$dark_cyan"
  LS_COLORS+=":*.bak=$dark_purple"
  LS_COLORS+=":*~=$dark_purple"
  LS_COLORS+=":*#=$italic$dark_purple"
  LS_COLORS+=":*tags=$dark_purple"
  export LS_COLORS
elif ls -G -d . >/dev/null 2>&1; then # macOS `ls`
  # I've moved to using gnu ls (from coreutils) and these are for
  # BSD ls, which macos uses by default. Leaving here for now
  # https://www.freebsd.org/cgi/man.cgi?query=ls&apropos=0&sektion=1&format=html
  colorflag="-G" # Or could use export CLICOLOR=1
  export LSCOLORS='BxBxhxDxfxhxhxhxhxcxcx'
  export LSCOLORS='gxBxhxDxfxhxhxhxhxcxcx'
else
    echo 'Unknown `ls` - solaris ls?'
fi

alias df='df -h'
alias du='du -h'

# Always use color output for `ls`
alias ls="command ls ${colorflag}"
alias ll='ls -l'  # long list
alias la='ls -A'  # all but . and ..
alias l='ls -CF'
alias lsr='ls -lrt'

set -o vi

alias cdw='cd ~/workspaces'
alias cdm='cd ~/workspaces/mule'
alias cde='cd ~/workspaces/elixir'
alias cdp='cd ~/workspaces/phoenix'
alias cdt='cd ~/tools'
alias gemspec='vi *.gemspec'

alias depAnalyze='mvn dependency:analyze'
alias depTree='mvn dependency:tree > depTree'
alias surefire-grep='grep -H "Tests run" target/surefire-reports/*.txt | grep FAILURE'
alias fails='vi target/surefire-reports/munit.*'

alias mcp='mvn clean package'
alias mct='mvn clean test'
alias incrementVersion='mvn build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion}-SNAPSHOT versions:commit'

alias skipTests='mvn clean package -DskipTests'
alias skipJustMunitTests='mvn clean package -DskipMunitTests'
alias how-runTests='echo mvn clean test -Dmunit.test=.*my-test.*#.*test-scenario-1.*'
alias how-oneTest='echo mvn clean test -Dmunit.test=.*my-test.*#.*test-scenario-1.*'
alias how-singleTest='echo mvn clean test -Dmunit.test=.*my-test.*#.*test-scenario-1.*'
alias how-remove-quarantine='echo xattr -r -d com.apple.quarantine *'
alias how-checkout-remote-branch='echo git checkout --track origin/feature/daves_branch'
alias how-git-list-tags="git for-each-ref --format='%(if)%(committerdate)%(then)%(committerdate)%(else)%(*committerdate)%(end) %(refname:lstrip=2)' refs/tags/*"
alias how-pandoc='echo pandoc test1.md -s -o test1.pdf'

alias how-restore-postgres='psql -d gens_dev -f gens-db-20180131-2043.bkup'

alias make-test-jar='mvn clean org.apache.maven.plugins:maven-jar-plugin:test-jar'

alias test-ping='ping 8.8.8.8'

alias how-gitDeleteCommit='echo git reset --hard HEAD^ '

alias directorySize='du -hcs '


alias how-ssh-get-pub-from-private='ssh-keygen -y -f ~/.ssh/id_rsa'

alias grd='./gradlew'
alias g='git status'
alias gpr='git pull --rebase'
alias gphm='git push heroku master'

alias ga='git add '
#alias gb='git branch '
alias gc='git commit'
alias gd='git diff'
# I don't like these because bash completion doesn't work <--- Reminder to future self, cause I know I'll forget about this.
# bash completion does work with 'git sw'
#alias gs='git switch'
#alias sw='git switch'
alias gwm='git switch main'
alias gsm='git switch main'

alias got='git '
alias get='git '
alias igt='git '

alias gt='./gradlew tasks'
alias gb='./gradlew build'

alias dc='docker container'
alias dv='docker volume'
alias dcl='docker container ls'
alias dcls='docker container ls'
alias docker-network-query="docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'"

alias please='sudo $(fc -ln -1)'

alias ipinfo='curl ipinfo.io/$(curl -s https://api.myip.com | jq -r ".ip")'

# From https://github.com/nickjj/dotfiles/blob/master/.aliases
# Need to look at the dev config file this brings in
alias jek="RUBYOPT='-W0' bundle exec jekyll serve --config _config.yml,_config.dev.yml --drafts --livereload"

alias weather='curl http://wttr.in'

if [[ "$OSTYPE" == "darwin"* ]]; then
  # TODO asdf-vm has corretto support (corretto-16.0.1.9.1 down to corretto-8.292.10.1)
  function java8() { export JAVA_HOME=`/usr/libexec/java_home -v1.8*` }
  function java9() { export JAVA_HOME=`/usr/libexec/java_home -v 9*` }
  function java11() { export JAVA_HOME=`/usr/libexec/java_home -v 11*` }

  #Open files with:
  #$ ij foo
  alias ij='open -b com.jetbrains.intellij'
  alias sl='/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl'
  alias sublime='/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl'
fi

alias k=kubectl