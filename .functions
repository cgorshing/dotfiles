#!/usr/bin/env bash

if test -f ~/workspaces/dotfiles-1/.functions; then
  source ~/workspaces/dotfiles-1/.functions
fi

# Remove ones I don't use/want
unset tre;
unset getcertnames;
unset digga;
unset gz;
unset phpserver;
unset targz;
unset cdf;

function tcpserver() {
  command tcpserver -B "#######\nThis is our banner\n######\n" 127.0.0.1 3333 expect -c 'expect "hello" ; send "hi\n" ; expect "bye" ; send "see you\n"'
}

function pyserver() {
  local port="${1:-8000}";
  # python2 -m SimpleHTTPServer "$port"
  python3 -m http.server "$port"
}

function server() {
  local port="${1:-3000}";
  local script="const http = require('http'); const fs = require('fs'); let listenPort = process.env.PORT || $port; var server = http.createServer({}, (request, response) => { try { if (fs.existsSync('index.html')) { fs.readFile('index.html', (err, data) => { if (err) console.log(err); response.write(data.toString('utf8')); response.end(); }); } else { response.statusCode = 404; response.write('No file found - this only serves index.html'); response.end(); } } catch(err) { console.error(err); } }); console.log('Listening on port ' + listenPort); server.listen(listenPort, '127.0.0.1'); console.log('Server started');";

  if [ -x "$(command -v node)" ]; then
    echo 'Using node'
    node --eval "$script"
  elif [ -x "$(command -v nodejs)" ]; then
    echo 'Using nodejs'
    nodejs --eval "$script"
  elif [ -x "$(command -v node-16)" ]; then
    echo 'Using node-16'
    node-16 --eval "$script"
  elif [ -x "$(command -v node-20)" ]; then
    echo 'Using node-20'
    node-20 --eval "$script"
  else
    echo "You need to install nodejs"
  fi
}

function turnOnNVM() {
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
}

function turnOnNpmCompletion() {
  source <(npm completion)
}

function skipTests() {
  mvn clean package -DskipMunitTests "$@"
}

function prettyXml {
  xmllint --format "$1" > "$1".a_longer_extension_to_ensure_unique
  mv "$1".a_longer_extension_to_ensure_unique "$1"
}

function turnOnRVM() {
  [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
}

function update-brew() {
  brew update && brew upgrade && echo 'Now sleeping....' && sleep 1 && echo 'brew cleanup:' && brew cleanup && echo 'sleeping again....' && sleep 1 && echo 'brew cleanup --prune-prefix' && brew cleanup --prune-prefix
  # echo 'Not doing "brew prune" anymore - cause it is deprecated'
}

function update-upstream() {
  git fetch upstream
  git switch master
  git merge upstream/master
}
function update-upstream-main() {
  git fetch upstream
  git switch main
  git merge upstream/main
}

function update-git() {
  for D in *
  do
    [ -d "${D}/.git" ] && echo -n "$D " && git -C "$D" pull --rebase
  done
}

function update-gems() {
  bundle lock --update
  bundle install
}

function turnOnASDF() {
  . "$HOME"/.asdf/asdf.sh
  . "$HOME"/.asdf/completions/asdf.bash
  update-asdf
  asdf current
}

function turnOnVENV() {
  if [[ -d .venv ]]; then
    source .venv/bin/activate
  elif [[ -d ../.venv ]]; then
    source ../.venv/bin/activate
  else
    echo "Can't find a venv to source"
  fi
}

function build-venv() {
  if [[ -d .venv ]]; then
    echo "Won't build .venv because it is already exists."
  else
    python -m venv .venv && \
      turnOnVENV && \
      update-pip && \
      python -m pip install wheel && \
      python -m pip install pytest && \
      python -m pip install pyclean && \
      python -m pip install pylint-django && \
      python -m pip install behave && \
      python -m pip install django-test-migrations && \
      python -m pip install django-debug-toolbar==3.2.4 && \
      python -m pip install pylint && \
      python -m pip install pur && \
      python -m pip install pre-commit && \
      [[ -s requirements.txt ]] && python -m pip install -r requirements.txt && \
      [[ -s test_requirements.txt ]] && python -m pip install -r test_requirements.txt
  fi
}
function cleanup-venv() {
  if [[ -d .venv ]]; then
    deactivate && rm -rf .venv && build-venv
  else
    echo "Can't find a venv to clean"
  fi
}

function update-pip() {
  python -m pip install --upgrade pip
}

function update-npm() {
  npm install -g npm
}

function update-asdf() {
  asdf update
  asdf plugin update --all
}

function update-system() {
  sudo apt update && sudo apt upgrade -y && sudo apt autoremove -y
}

function cleanup-docker() {
  docker system prune -a
  docker volume prune
}

function cleanup-directories() {
  find . -name ".DS_Store" -print -delete

}

function compress-image() {
  convert -strip -interlace Plane -gaussian-blur 0.05 -quality 85% "$1" "${1%.jpg}-compressed.jpg"
}

function turnOnAutojump() {
  [ -f /usr/local/etc/profile.d/autojump.sh ] && . /usr/local/etc/profile.d/autojump.sh
}

function sound-good() {
  afplay ~/workspaces/livestream-jamesshore/build/sounds/success.mp3
}
function sound-bad() {
  #afplay ~/workspaces/livestream-jamesshore/build/sounds/lint_error.mp3
  afplay ~/workspaces/livestream-jamesshore/build/sounds/fail.m4a
}

function flush-dns() {

  sudo ifconfig en0 down
  sleep 5

  sudo killall -HUP mDNSResponder
  sudo dscacheutil -flushcache
  sudo route flush
  sudo ifconfig en0 up
}

function cleanup-gradle() {
  find ~/.gradle -type f -atime +30 -delete
  find ~/.gradle -mindepth 1 -type d -empty -delete
}